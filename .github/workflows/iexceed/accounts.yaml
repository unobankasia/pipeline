name: Account-Template-CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_call:
    inputs:
      REGION:
        type: string        
      MICROSERVICES:
        type: string         
      ASSUME_ROLE:
        type: string         
      ASSUME_ROLE_PROD:
        type: string         
      EXCLUDED_CLASS:
        type: string                
      PLATFORM_REPO:
        type: string        
      BUILD_PATH:
        type: string         
      JAVA_HOME:
        type: string        
      MAVEN_HOME:
        type: string      
    
env:
  ## Sets environment variable
  JAVA_HOME: ${{inputs.JAVA_HOME}}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CI:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      - name: Setup Tag for image and branch
        run: |
          echo "IMAGE_TAG=${GITHUB_REF##*/}-$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          
      - name: Run scanner for the repository
        id: scan
        run: |
          if [[ ${{env.BRANCH}} == 'iexceed-uat' || ${{env.BRANCH}} == 'prod'  ]];
          then
              whispers ${{ github.workspace }}/${{inputs.BUILD_PATH}} > output.json;
              jq . output.json > whispers.json ;
              .github/scripts/whispers.sh 
          else
                whispers ${{ github.workspace }}/${{inputs.BUILD_PATH}}
          fi   
      
      - name: Maven Build  
        run: /opt/apache-maven-3.8.4/bin/mvn clean install
        working-directory: ${{inputs.BUILD_PATH}}  
      
      - name: Docker Build 
        run:  docker build -t $ECR_REPO:$IMAGE_TAG .
        working-directory: ${{inputs.BUILD_PATH}}
        
      - name: Configure AWS Credentials
        if: env.BRANCH != 'prod'
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-region: ${{inputs.REGION}}
         role-to-assume: ${{inputs.ASSUME_ROLE}}
         role-duration-seconds: 1200
         role-skip-session-tagging: true
              
      - name: Configure AWS Credentials (PROD)
        if: env.BRANCH == 'prod'
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-region: ${{inputs.REGION}}
         role-to-assume: ${{inputs.ASSUME_ROLE_PROD}}
         role-duration-seconds: 1200
         role-skip-session-tagging: true

      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        env:          
          ECR_URL: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $ECR_REPO:$IMAGE_TAG $ECR_URL/$ECR_REPO:$IMAGE_TAG
          docker push $ECR_URL/$ECR_REPO:$IMAGE_TAG
        working-directory: ${{inputs.BUILD_PATH}}

      - name: Update Image tag 
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          command: |
            git clone https://${{secrets.GIT_TOKEN}}@github.com/unobankasia/${{inputs.PLATFORM_REPO}}.git
            cd ${{inputs.PLATFORM_REPO}}/envs/${{env.BRANCH}}/03-applications/${{inputs.MICROSERVICES}}
            git checkout -b $IMAGE_TAG
            sed -i 's/tag.*/tag: "${{env.IMAGE_TAG}}"/' values.yaml
            git add values.yaml
            git commit -m "${{inputs.MICROSERVICES}} | ${{env.IMAGE_TAG}}"
            git push -u origin $IMAGE_TAG
          new_command_on_retry: |
            cd ${{inputs.PLATFORM_REPO}}
            git pull origin $IMAGE_TAG
            git push -u origin $IMAGE_TAG      
          
      - name: PR Merge
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          command: |
            cd ${{inputs.PLATFORM_REPO}}
            gh pr create --fill
            sleep 2
            gh pr merge -sd --admin 
          new_command_on_retry: |
            cd ${{inputs.PLATFORM_REPO}}
            gh pr create --fill
            sleep 2
            gh pr merge -dr --admin 

      - name: Vulnerabilities
        run: | 
          sleep 30
          aws ecr describe-image-scan-findings --repository-name $ECR_REPO --image-id imageTag=$IMAGE_TAG --region ap-southeast-1 | jq .imageScanFindings.findingSeverityCounts
          
      - name: Send mail
        if: ${{ failure() && (env.BRANCH == 'iexceed-uat' || env.BRANCH == 'prod') }}
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: ${{ secrets.SMTP_ADDRESS }}
          server_port: 587
          # user credentials
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Pipeline Execution of ${{ github.repository }} is ${{ job.status }}
          body: |
            ------------  IEXCEED  ------------               
            
            Envionment - ${{env.BRANCH}} 
            Application - ${{ inputs.MICROSERVICES }} 
            pipeline execution is ${{ job.status }}.
            ___________________________________________
            The Repository scan detected ${{ steps.scan.outputs.count }} CRITICAL Vulnerabilities. 
            Please Find Attached.
            ___________________________________________
            
          cc: ${{ secrets.CC_MAIL }}
          to: ${{ secrets.TO_MAIL }}
          from: '"Aniket Dewangan" <aniket.dewangan@unobank.asia>'
          attachments: whispers.json
