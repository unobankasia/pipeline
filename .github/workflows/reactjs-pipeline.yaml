name: Template-CI

on:
  workflow_call:
    inputs:
      REGION:
        type: string        
      MICROSERVICES:
        type: string         
      ASSUME_ROLE:
        type: string         
      ASSUME_ROLE_PROD:
        type: string         
      EXCLUDED_CLASS:
        type: string                
      PLATFORM_REPO:
        type: string        
      BUILD_PATH:
        type: string         
      NODE_HOME:  # Change this to NODE_HOME for React.js
        type: string  # Assuming you need to specify the Node.js home directory        
      MAVEN_HOME:
        type: string

env:
  NODE_HOME: ${{ inputs.NODE_HOME }}  # Change here to NODE_HOME

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install Dependencies and Build
        run: |
          npm install --force
          npm run build
      
      - name: Run scanner for the repository
        continue-on-error: true
        run: |
          whispers ${{ github.workspace }} > whispers.txt
          .github/workflows/scripts/whispers.sh  
          
      - name: Setup Tag for image and branch
        run: |
          echo "IMAGE_TAG=${GITHUB_REF##*/}-$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
               

      - name: Docker Build  
        run: docker build -t ${{ inputs.MICROSERVICES }}:$IMAGE_TAG .
          
      - name: Configure AWS Credentials
        if: ${{ !contains(env.BRANCH, 'prod') }} 
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-region: ${{ inputs.REGION }}
         role-to-assume: ${{ inputs.ASSUME_ROLE }}
         role-duration-seconds: 3600
         role-skip-session-tagging: true
              
      - name: Configure AWS Credentials (PROD)
        if: ${{ contains(env.BRANCH, 'prod') }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-region: ${{ inputs.REGION }}
         role-to-assume: ${{ inputs.ASSUME_ROLE_PROD }}
         role-duration-seconds: 3600
         role-skip-session-tagging: true
          
      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Create ECR repository
        continue-on-error: true
        run: aws ecr create-repository --repository-name ${{ inputs.MICROSERVICES }} --image-tag-mutability IMMUTABLE --image-scanning-configuration scanOnPush=true --encryption-configuration encryptionType=KMS --region ${{ inputs.REGION }}
        
      - name: Build, tag, and push image to Amazon ECR
        env:          
          ECR_URL: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ inputs.MICROSERVICES }}:$IMAGE_TAG $ECR_URL/${{ inputs.MICROSERVICES }}:$IMAGE_TAG
          docker push $ECR_URL/${{ inputs.MICROSERVICES }}:$IMAGE_TAG
          
      - name: Vulnerabilities
        env:          
          ECR_URL: ${{ steps.login-ecr.outputs.registry }}
        run: trivy image $ECR_URL/${{ inputs.MICROSERVICES }}:$IMAGE_TAG
      
      - name: Update Image tag
        run: |
          git clone https://${{ secrets.GIT_TOKEN }}@github.com/unobankasia/${{ inputs.PLATFORM_REPO }}.git
          cd ${{ inputs.PLATFORM_REPO }}/envs/${{ env.BRANCH }}/03-applications/${{ inputs.MICROSERVICES }}
          git checkout -b $IMAGE_TAG
          sed -i 's/tag.*/tag: "${{ env.IMAGE_TAG }}"/' values.yaml
          git add values.yaml
          git commit -m "${{ inputs.MICROSERVICES }} | ${{ env.IMAGE_TAG }}"
          git push -u origin $IMAGE_TAG
          gh pr create --fill
          sleep 3
          gh pr merge -sd --admin
